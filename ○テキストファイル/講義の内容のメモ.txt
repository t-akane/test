●3/26

オブジェクト指向について
オブジェクト→もの、対象物
対照的に、手続き型プログラミング


基本的にはノートどおり
コンストラクタについては、窓口は初期化するイメージ




・インスタンス化、コンストラクタは基本
・カプセル、継承、実装は機能


ひとつのオブジェクトをを表現するときに
２つ要素がある

１つめ・・・性格、属性（年齢、容姿など）Be動詞で表現できる部分
２つめ・・・行動、振る舞い（英語をしゃべる、ギターを弾くなど）一般動詞


クラスの中の
フィールド→Be動詞部分
メソッド→一般動詞部分

上記２つをメンバという

今までの課題の中でフィールドを定義していたのはメインメソッドの中
→ローカル変数という

対比して、フィールドの中にある変数のことをメンバ変数という。

publicなどがつくのはすべてフィールド

必ず両方なければならないわけではない
どちらかのみでも成立はする

メソッドの書き方について
処理を行うためのもの。電卓のようなもの

電卓はボタンを押さないと動かない
ボタンにあたるものを引数（ひきすう）という

電卓の処理としては
内部処理を行うことと、
値を返すこと

返された値のことを戻り値（返り値）という。

上記が基本だが、引数を必要としない場合や
戻り値を返さない場合もある。

・原本クラスとは？
インスタンスの元になるもの。
インスタンスを実行して処理を行う。


Person taro=new Person();
これがインスタンス化。
タローインスタンスの発生。

・司令塔クラス
どのような処理を行うか。
何を代入するか。


taro.name="山田太郎";
ドットは、「〜の」という意味。
taroの名前に山田太郎を代入。


メソッドの基本

戻り値の型　メソッド名（引数）{

処理内容
return　;
}

returnがない場合は、戻り値がない処理
戻り値の型→voidになる。「空の」というような意味。



●mainメソッドは特殊。
必ず一番最初に実行される。
戻り値は持たない。
自動的に実行される（メソッドは基本的に呼び出されないと実行されない。）



●コンストラクタについて
生み出された瞬間に値を持っているための準備。
初期化をするための準備。

コンストラクタ名は、そのメソッドを含むクラスと同一。

コンストラクタが完全に一致するものにインスタンスは自分を当てはめて実行される。


いちいち代入しないでも、雛形を決めておけばすっきりと代入ができる。


コンストラクタを1つも定義していない場合
→引数も処理内容もないものがウラで自動的に作成され、実行される。
デフォルトコンストラクタという。
public Person(){}

なので、１つでもコンストラクタを定義する場合には、お約束のようにこれを書いておかないとコンパイルエラーになってしまう。

コンストラクタを複数定義する場合
引数のパターンがちがわないとできない。
どのコンストラクタを使うか1つに決められないとエラー。
パターンは引数の数、データ型、順番

1つのクラスの中に同名のメソッドを複数定義することを、
用語：「オーバーロード」という。多重定義。

●カプセル化

オブジェクトのイメージ
フィールドが真ん中にあって、その周りをメソッドが取り囲んでいる。
フィールドは隠されている。

メソッドは処理だから書き換えにくい。

フィールドは変数なので書き換えが起こりやすく、それに伴うエラーもおきやすい。


雛形はかならずpublicにしておく。
ほかのクラスでインスタンス化できなくなるから。



●ゲッターとセッター
getはほかのクラスから読み取る。
setはほかのクラスに書き込む。

ほかのクラスから、アクセスをさせるためのものなので、
この2つをあわせて「アクセサー」とよんだりもする。

ゲッターセッターを使うときは、フィールド名の先頭を大文字にする。
たとえば。。「userName」というフィールド名であれば
getUserName
となる。もともと大文字だったところはそのまま大文字。

・カプセル化のメリット

読み取りだけ許可、書き込みだけ許可、など分けて作りやすい。
フィールド名を変更しなければならない、などの状況で
作業が簡単で済む。

たとえば・・セッターで、年齢が1000歳とかマイナスなど、明らかにおかしい数値は入力することができないように範囲制限することもできる。
入力チェック（バリデーション）という。
if文で設定する。



●3/27

・継承について
ルーツが同じものは同じ継承を設定しておけば、
あとからおおもとを直せばいっせいに反映される。
手間が省けるという意味よりも、同じルーツのものを
いっせいに扱うため

疑問
100個あるうち、99個引き継ぎたい対象があって
1個入らない・・みたいなことはできるのか？


用語：オーバーライド
親クラスの記述を子クラスで上書きすること


・実装
いつもはclassで書いてたところが「interface」
interfaceはルールづくり。
abstract・・・具体的な処理内容を持たない。抽象メソッド
このシステムにこの機能は必ず必要、というものをリストアップする
メソッド名は機能名。playとかstopとか

インターフェースをひっぱってくるときは、extendsじゃなくて
implementsを使う。
抽象メソッドはすべて処理内容を書かなくてはいけないという、
義務が生じる。

extendsとimplementsを同時に使うこともできる



●import文について

パッケージが違えば、同じ名前のクラスはつくれる
importは、どこのクラスか所在をはっきりさせるためのもの








